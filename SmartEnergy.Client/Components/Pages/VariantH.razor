@page "/varianth"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@rendermode InteractiveServer

<PageTitle>Variant H</PageTitle>

<h1>Variant H - Liam Willis</h1>

<div style="display: flex; padding-bottom: 20px; padding-top: 20px;">
    <div style="flex: 1; padding-right: 10px;">
        <p>
            This page displays the daily energy consumption data for a specific meter over a selected range of days.
            You can adjust the range of days using the slider below to see how the energy consumption varies over time.
            The table below shows the total energy consumed, the amount of cheap and expensive energy, the average price
            of energy, and the percentage of cheap energy for each day.
        </p>
    </div>
    <div style="flex: 1; padding-left: 10px;">
        <BarChart @ref="barChart" Class="mb-4" />
    </div>
</div>

<div>
    <div>
        <label for="daysRange">Select Days Range:</label>
        <input type="range" id="daysRange" min="1" max="30" @bind="numberOfDays" @bind:after="OnDaysRangeChanged" />
        <span>@numberOfDays day(s)</span>
    </div>

    @if (loading)
    {
        <p><em>Data wordt geladen...</em></p>
    }
    else if (measurements == null)
    {
        <p><em>Geen gegevens beschikbaar.</em></p>
    }
    else
    {
        <div>

            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Total Energy (kWh)</th>
                            <th>Cheap Energy (kWh)</th>
                            <th>Expensive Energy (kWh)</th>
                            <th>Average Price (€/kWh)</th>
                            <th>Cheap Energy (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dailyEnergyConsumption in dailyEnergyConsumption)
                        {
                            <tr>
                                <td>@dailyEnergyConsumption.Date?.ToString("yyyy/MM/dd")</td>
                                <td>@dailyEnergyConsumption.TotalEnergy</td>
                                <td>@dailyEnergyConsumption.CheapEnergy</td>
                                <td>@dailyEnergyConsumption.ExpensiveEnergy</td>
                                <td>@dailyEnergyConsumption.AveragePrice</td>
                                <td>@dailyEnergyConsumption.CheapEnergyPercentage</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>


@code {
    private List<Measurement>? measurements;
    private List<DailyEnergyConsumption> dailyEnergyConsumption = new();
    private int meterId = 1078608;
    private int numberOfDays = 1;
    private string aggregationWindow = "1m";
    private bool loading = true;
    private BarChart barChart = default!;
    private bool isFirstRender = true;


    private async Task RenderManhattanAsync()
    {
        @* Console.WriteLine(dailyEnergyConsumption); *@
        Console.WriteLine(string.Join("\n"), dailyEnergyConsumption.Select(d => d.Date?.ToString("yyyy/MM/dd")).ToList());
        var data = new ChartData
            {
                Labels = dailyEnergyConsumption.Select(d => d.Date?.ToString("yyyy/MM/dd")).ToList(),
            @* Labels = new List<string> { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16",
"17",
"18", "19", "20" }, *@
    Datasets = new List<IChartDataset>
{
new BarChartDataset
{
Label = "Total Energy",
Data = dailyEnergyConsumption.Select(d => d.TotalEnergy).Cast<double?>().ToList(),
BackgroundColor = new List<string> { "rgb(88, 80, 141)" },
CategoryPercentage = 0.8,
BarPercentage = 1,
},
}
};

        var options = new BarChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "MANHATTAN";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = "Days", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Energy", Display = true };

        await barChart.InitializeAsync(data, options);
    }

    private async Task UpdateManhattanAsync()
    {

        var data = new ChartData
            {
                Labels = dailyEnergyConsumption.Select(d => d.Date?.ToString("yyyy/MM/dd")).ToList(),
            @* Labels = new List<string> { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16",
"17",
"18", "19", "20" }, *@
    Datasets = new List<IChartDataset>
{
new BarChartDataset
{
Label = "Total Energy",
Data = dailyEnergyConsumption.Select(d => d.TotalEnergy).Cast<double?>().ToList(),
BackgroundColor = new List<string> { "rgb(88, 80, 141)" },
CategoryPercentage = 0.8,
BarPercentage = 1,
},
new BarChartDataset
{
Label = "Cheap Energy",
Data = dailyEnergyConsumption.Select(d => d.CheapEnergy).Cast<double?>().ToList(),
BackgroundColor = new List<string> { "rgb(2, 207, 26)" },
CategoryPercentage = 0.8,
BarPercentage = 1,
},
new BarChartDataset
{
Label = "Expensive Energy",
Data = dailyEnergyConsumption.Select(d => d.ExpensiveEnergy).Cast<double?>().ToList(),
//red
BackgroundColor = new List<string> { "rgb(255, 0, 0)" },
CategoryPercentage = 0.8,
BarPercentage = 1,
},
}
};

        var options = new BarChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "Energy Consumption in kWh";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = "Days", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Energy", Display = true };
        await barChart.UpdateAsync(data, options);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderManhattanAsync();
            isFirstRender = false;
        }
    }


    private async Task CalculateDailyEnergyConsumption()
    {
        if (measurements == null) return;

        // Group measurements by date
        var groupedMeasurements = measurements
        .GroupBy(measurement => measurement.Timestamp.Date)
        .ToList();

        dailyEnergyConsumption = groupedMeasurements.Select(group =>
        {

            // Create list of measurements per day
            var dailyMeasurements = group.ToList();

            // Calculate daily average price using Average method
            var avgPrice = dailyMeasurements.Average(m => m.EnergyPrice);

            // The where method is used to filter the measurements based on the energy price
            // The sum method is used to calculate the total energy consumed
            var cheapEnergy = dailyMeasurements.Where(m => m.EnergyPrice <= avgPrice).Sum(m => m.Value);
            var expensiveEnergy = dailyMeasurements.Where(m => m.EnergyPrice > avgPrice).Sum(m => m.Value);
            var totalEnergy = dailyMeasurements.Sum(m => m.Value);

            // Calculate the percentage of cheap energy
            var cheapEnergyPercentage = (totalEnergy > 0) ? Math.Round((decimal)(cheapEnergy / totalEnergy) * 100) : 0;

            // Create a new DailyEnergyConsumption object
            return new DailyEnergyConsumption
                {
                    Date = group.Key,
                    TotalEnergy = totalEnergy,
                    CheapEnergy = cheapEnergy,
                    ExpensiveEnergy = expensiveEnergy,
                    CheapEnergyPercentage = (double)cheapEnergyPercentage,
                    AveragePrice = (double?)Math.Round((decimal)avgPrice, 5)
                };
        }).ToList();
    }

    private async Task getMeasurements()
    {
        measurements = await this.measurementRepository.GetEnergyConsumed(
        meterId,
        numberOfDays,
        aggregationWindow
        );
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        StateHasChanged();
        await getMeasurements();


        if (measurements != null)
        {
            await CalculateDailyEnergyConsumption();
        }

        loading = false;
        StateHasChanged();
    }


    private async Task OnDaysRangeChanged()
    {
        loading = true;
        StateHasChanged();
        Console.WriteLine(loading);

        await getMeasurements();
        await CalculateDailyEnergyConsumption();
        await UpdateManhattanAsync();

        loading = false;
        StateHasChanged();
    }

    private string FormatDateOnly(DateOnly? date)
    {
        return date.HasValue
        ? date.Value.ToString("yyyy-MM-dd")
        : "";
    }

    private class DailyEnergyConsumption
    {
        public DateTime? Date { get; set; }
        public double? TotalEnergy { get; set; }
        public double? CheapEnergy { get; set; }
        public double? ExpensiveEnergy { get; set; }
        public double? CheapEnergyPercentage { get; set; }
        public double? AveragePrice { get; set; }
    }
}
