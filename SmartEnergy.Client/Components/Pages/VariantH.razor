@page "/varianth"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@rendermode InteractiveServer

<PageTitle>Variant H</PageTitle>

<h1>Variant H</h1>

<div>
    <label for="daysRange">Select Days Range:</label>
    <input type="range" id="daysRange" min="1" max="30" @bind="numberOfDays" @bind:after="OnDaysRangeChanged" />
    <span>@numberOfDays day(s)</span>
</div>

@if (loading)
{
    <p><em>Data wordt geladen...</em></p>
}
else if (measurements == null)
{
    <p><em>Geen gegevens beschikbaar.</em></p>
}
else
{
    <div>

        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Total Energy (kWh)</th>
                        <th>Cheap Energy (kWh)</th>
                        <th>Expensive Energy (kWh)</th>
                        <th>Average Price (€/kWh)</th>
                        <th>Cheap Energy (%)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dailyEnergyConsumption in dailyEnergyConsumption)
                    {
                        <tr>
                            <td>@dailyEnergyConsumption.Date?.ToString("yyyy/MM/dd")</td>
                            <td>@dailyEnergyConsumption.TotalEnergy</td>
                            <td>@dailyEnergyConsumption.CheapEnergy</td>
                            <td>@dailyEnergyConsumption.ExpensiveEnergy</td>
                            <td>@dailyEnergyConsumption.AveragePrice</td>
                            <td>@dailyEnergyConsumption.CheapEnergyPercentage</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Measurement>? measurements;
    private List<DailyEnergyConsumption> dailyEnergyConsumption = new();
    private int meterId = 1078608;
    private int numberOfDays = 1;
    private string aggregationWindow = "1m";
    private bool loading = true;


    private async Task CalculateDailyEnergyConsumption()
    {
        if (measurements == null) return;

        // Group measurements by date
        var groupedMeasurements = measurements
        .GroupBy(measurement => measurement.Timestamp.Date)
        .ToList();

        dailyEnergyConsumption = groupedMeasurements.Select(group =>
        {

            // Create list of measurements per day
            var dailyMeasurements = group.ToList();

            // Calculate daily average price using Average method
            var avgPrice = dailyMeasurements.Average(m => m.EnergyPrice);

            // The where method is used to filter the measurements based on the energy price
            // The sum method is used to calculate the total energy consumed
            var cheapEnergy = dailyMeasurements.Where(m => m.EnergyPrice <= avgPrice).Sum(m => m.Value);
            var expensiveEnergy = dailyMeasurements.Where(m => m.EnergyPrice > avgPrice).Sum(m => m.Value);
            var totalEnergy = dailyMeasurements.Sum(m => m.Value);

            // Calculate the percentage of cheap energy
            var cheapEnergyPercentage = (totalEnergy > 0) ? Math.Round((decimal)(cheapEnergy / totalEnergy) * 100) : 0;

            // Create a new DailyEnergyConsumption object
            return new DailyEnergyConsumption
                {
                    Date = group.Key,
                    TotalEnergy = totalEnergy,
                    CheapEnergy = cheapEnergy,
                    ExpensiveEnergy = expensiveEnergy,
                    CheapEnergyPercentage = (double)cheapEnergyPercentage,
                    AveragePrice = (double?)Math.Round((decimal)avgPrice, 5)
                };
        }).ToList();
    }

    private async Task getMeasurements()
    {
        measurements = await this.measurementRepository.GetEnergyConsumed(
        meterId,
        numberOfDays,
        aggregationWindow
        );
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        StateHasChanged();
        await getMeasurements();

        if (measurements != null)
        {
            CalculateDailyEnergyConsumption();
        }

        loading = false;
        StateHasChanged();
    }

    private async Task OnDaysRangeChanged()
    {
        loading = true;
        StateHasChanged();
        Console.WriteLine(loading);

        await getMeasurements();
        await CalculateDailyEnergyConsumption();

        loading = false;
        StateHasChanged();
    }

    private string FormatDateOnly(DateOnly? date)
    {
        return date.HasValue
        ? date.Value.ToString("yyyy-MM-dd")
        : "";
    }

    private class DailyEnergyConsumption
    {
        public DateTime? Date { get; set; }
        public double? TotalEnergy { get; set; }
        public double? CheapEnergy { get; set; }
        public double? ExpensiveEnergy { get; set; }
        public double? CheapEnergyPercentage { get; set; }
        public double? AveragePrice { get; set; }
    }
}
