@page "/varianth"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@rendermode InteractiveServer

<PageTitle>Variant H</PageTitle>

<h1>Variant H</h1>

@if (measurements == null)
{
    <p><em>Data wordt geladen...</em></p>
}
else
{
    <div>
        <div>
            <label>
                Start Datum
                <input type="date" max=@(DateTime.Now.ToString("yyyy-MM-dd")) @bind="startDate"
                    @bind:after="ValidateDates" />
            </label>
            <label>
                Eind Datum
                <input type="date" max=@(DateTime.Now.ToString("yyyy-MM-dd")) @bind="endDate" @bind:after="ValidateDates" />
            </label>
            @if (!string.IsNullOrEmpty(dateError))
            {
                <p style="color:red">@dateError</p>
            }
        </div>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Datum</th>
                        <th>Totaal energie</th>
                        <th>Goedkope energie</th>
                        <th>Dure energie</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dailyEnergyConsumption in dailyEnergyConsumption)
                    {
                        <tr>
                            <td>@dailyEnergyConsumption.Date</td>
                            <td>@dailyEnergyConsumption.TotalEnergy</td>
                            <td>@dailyEnergyConsumption.CheapEnergy</td>
                            <td>@dailyEnergyConsumption.ExpensiveEnergy</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Measurement>? measurements;
    private List<DailyEnergyConsumption> dailyEnergyConsumption = new();
    private DateOnly? endDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly? startDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));
    private string? dateError { get; set; }
    private int meterId = 1078608;
    private int numberOfDays = 1;
    private string aggregationWindow = "5m";

    private async Task ValidateDates()
    {
        if (startDate.HasValue && endDate.HasValue)
        {
            if (endDate.Value <= startDate.Value)
            {
                endDate = startDate.Value.AddDays(1);
                dateError = "Eind datum mag niet voor of op de start datum liggen";
            }
            else
            {
                dateError = null;
                await getMeasurements();
                CalculateDailyEnergyConsumption();
            }
        }
    }

    private void CalculateDailyEnergyConsumption()
    {
        if (measurements == null || !startDate.HasValue || !endDate.HasValue) return;

        // Group measurements by date
        var groupedMeasurements = measurements
        .GroupBy(measurement => measurement.Timestamp.Date)
        .ToList();
        @*
foreach (var group in groupedMeasurements)
{
Console.WriteLine($"Date: {group.Key}");

foreach (var measurement in group)
{
Console.WriteLine($"Measurement: {measurement}"); // You can replace this with specific properties of 'measurement'
}
} *@


        var filteredMeasurements = measurements
        .GroupBy(measurement => measurement.Timestamp.Date).Select(group =>
        {
            var dailyMeasurements = group.ToList();
            var avgPrice = dailyMeasurements.Average(m => m.EnergyPrice);
            var cheapEnergy = dailyMeasurements.Where(m => m.EnergyPrice <= avgPrice).Sum(m => m.Value);
            var expensiveEnergy = dailyMeasurements.Where(m => m.EnergyPrice > avgPrice).Sum(m => m.Value);
            var totalEnergy = dailyMeasurements.Sum(m => m.Value);

            return new DailyEnergyConsumption
                {
                    Date = group.Key,
                    TotalEnergy = totalEnergy,
                    CheapEnergy = cheapEnergy,
                    ExpensiveEnergy = expensiveEnergy
                };
        }).ToList();


        dailyEnergyConsumption = filteredMeasurements;

    }

    private async Task getMeasurements()
    {
        Console.WriteLine(startDate);
        Console.WriteLine(endDate);

        measurements = await this.measurementRepository.GetEnergyConsumed(
        meterId,
        numberOfDays,
        aggregationWindow,
        FormatDateOnly(startDate),
        FormatDateOnly(endDate)
        );
    }

    protected override async Task OnInitializedAsync()
    {
        await getMeasurements();

        if (measurements != null)
        {
            CalculateDailyEnergyConsumption();
        }
    }


    private string FormatDateOnly(DateOnly? date)
    {
        return date.HasValue
        ? date.Value.ToString("yyyy-MM-dd")
        : "";
    }

    private class DailyEnergyConsumption
    {
        public DateTime? Date { get; set; }
        public double? TotalEnergy { get; set; }
        public double? CheapEnergy { get; set; }
        public double? ExpensiveEnergy
        { get; set; }
    }
}
